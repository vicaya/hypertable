#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'client_types'

        module Hypertable
          module ThriftGen
            module ClientService
              class Client
                include ::Thrift::Client

                def create_namespace(ns)
                  send_create_namespace(ns)
                  recv_create_namespace()
                end

                def send_create_namespace(ns)
                  send_message('create_namespace', Create_namespace_args, :ns => ns)
                end

                def recv_create_namespace()
                  result = receive_message(Create_namespace_result)
                  raise result.e unless result.e.nil?
                  return
                end

                def create_table(ns, table_name, schema)
                  send_create_table(ns, table_name, schema)
                  recv_create_table()
                end

                def send_create_table(ns, table_name, schema)
                  send_message('create_table', Create_table_args, :ns => ns, :table_name => table_name, :schema => schema)
                end

                def recv_create_table()
                  result = receive_message(Create_table_result)
                  raise result.e unless result.e.nil?
                  return
                end

                def open_namespace(ns)
                  send_open_namespace(ns)
                  return recv_open_namespace()
                end

                def send_open_namespace(ns)
                  send_message('open_namespace', Open_namespace_args, :ns => ns)
                end

                def recv_open_namespace()
                  result = receive_message(Open_namespace_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'open_namespace failed: unknown result')
                end

                def close_namespace(ns)
                  send_close_namespace(ns)
                  recv_close_namespace()
                end

                def send_close_namespace(ns)
                  send_message('close_namespace', Close_namespace_args, :ns => ns)
                end

                def recv_close_namespace()
                  result = receive_message(Close_namespace_result)
                  raise result.e unless result.e.nil?
                  return
                end

                def open_future(queue_size)
                  send_open_future(queue_size)
                  return recv_open_future()
                end

                def send_open_future(queue_size)
                  send_message('open_future', Open_future_args, :queue_size => queue_size)
                end

                def recv_open_future()
                  result = receive_message(Open_future_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'open_future failed: unknown result')
                end

                def cancel_future(ff)
                  send_cancel_future(ff)
                  recv_cancel_future()
                end

                def send_cancel_future(ff)
                  send_message('cancel_future', Cancel_future_args, :ff => ff)
                end

                def recv_cancel_future()
                  result = receive_message(Cancel_future_result)
                  raise result.e unless result.e.nil?
                  return
                end

                def get_future_result(ff)
                  send_get_future_result(ff)
                  return recv_get_future_result()
                end

                def send_get_future_result(ff)
                  send_message('get_future_result', Get_future_result_args, :ff => ff)
                end

                def recv_get_future_result()
                  result = receive_message(Get_future_result_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_future_result failed: unknown result')
                end

                def get_future_result_as_arrays(ff)
                  send_get_future_result_as_arrays(ff)
                  return recv_get_future_result_as_arrays()
                end

                def send_get_future_result_as_arrays(ff)
                  send_message('get_future_result_as_arrays', Get_future_result_as_arrays_args, :ff => ff)
                end

                def recv_get_future_result_as_arrays()
                  result = receive_message(Get_future_result_as_arrays_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_future_result_as_arrays failed: unknown result')
                end

                def get_future_result_serialized(ff)
                  send_get_future_result_serialized(ff)
                  return recv_get_future_result_serialized()
                end

                def send_get_future_result_serialized(ff)
                  send_message('get_future_result_serialized', Get_future_result_serialized_args, :ff => ff)
                end

                def recv_get_future_result_serialized()
                  result = receive_message(Get_future_result_serialized_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_future_result_serialized failed: unknown result')
                end

                def close_future(ff)
                  send_close_future(ff)
                  recv_close_future()
                end

                def send_close_future(ff)
                  send_message('close_future', Close_future_args, :ff => ff)
                end

                def recv_close_future()
                  result = receive_message(Close_future_result)
                  raise result.e unless result.e.nil?
                  return
                end

                def open_scanner(ns, table_name, scan_spec, retry_table_not_found)
                  send_open_scanner(ns, table_name, scan_spec, retry_table_not_found)
                  return recv_open_scanner()
                end

                def send_open_scanner(ns, table_name, scan_spec, retry_table_not_found)
                  send_message('open_scanner', Open_scanner_args, :ns => ns, :table_name => table_name, :scan_spec => scan_spec, :retry_table_not_found => retry_table_not_found)
                end

                def recv_open_scanner()
                  result = receive_message(Open_scanner_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'open_scanner failed: unknown result')
                end

                def open_scanner_async(ns, table_name, future, scan_spec, retry_table_not_found)
                  send_open_scanner_async(ns, table_name, future, scan_spec, retry_table_not_found)
                  return recv_open_scanner_async()
                end

                def send_open_scanner_async(ns, table_name, future, scan_spec, retry_table_not_found)
                  send_message('open_scanner_async', Open_scanner_async_args, :ns => ns, :table_name => table_name, :future => future, :scan_spec => scan_spec, :retry_table_not_found => retry_table_not_found)
                end

                def recv_open_scanner_async()
                  result = receive_message(Open_scanner_async_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'open_scanner_async failed: unknown result')
                end

                def close_scanner(scanner)
                  send_close_scanner(scanner)
                  recv_close_scanner()
                end

                def send_close_scanner(scanner)
                  send_message('close_scanner', Close_scanner_args, :scanner => scanner)
                end

                def recv_close_scanner()
                  result = receive_message(Close_scanner_result)
                  raise result.e unless result.e.nil?
                  return
                end

                def close_scanner_async(scanner)
                  send_close_scanner_async(scanner)
                  recv_close_scanner_async()
                end

                def send_close_scanner_async(scanner)
                  send_message('close_scanner_async', Close_scanner_async_args, :scanner => scanner)
                end

                def recv_close_scanner_async()
                  result = receive_message(Close_scanner_async_result)
                  raise result.e unless result.e.nil?
                  return
                end

                def next_cells(scanner)
                  send_next_cells(scanner)
                  return recv_next_cells()
                end

                def send_next_cells(scanner)
                  send_message('next_cells', Next_cells_args, :scanner => scanner)
                end

                def recv_next_cells()
                  result = receive_message(Next_cells_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'next_cells failed: unknown result')
                end

                def next_cells_as_arrays(scanner)
                  send_next_cells_as_arrays(scanner)
                  return recv_next_cells_as_arrays()
                end

                def send_next_cells_as_arrays(scanner)
                  send_message('next_cells_as_arrays', Next_cells_as_arrays_args, :scanner => scanner)
                end

                def recv_next_cells_as_arrays()
                  result = receive_message(Next_cells_as_arrays_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'next_cells_as_arrays failed: unknown result')
                end

                def next_cells_serialized(scanner)
                  send_next_cells_serialized(scanner)
                  return recv_next_cells_serialized()
                end

                def send_next_cells_serialized(scanner)
                  send_message('next_cells_serialized', Next_cells_serialized_args, :scanner => scanner)
                end

                def recv_next_cells_serialized()
                  result = receive_message(Next_cells_serialized_result)
                  return result.success unless result.success.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'next_cells_serialized failed: unknown result')
                end

                def next_row(scanner)
                  send_next_row(scanner)
                  return recv_next_row()
                end

                def send_next_row(scanner)
                  send_message('next_row', Next_row_args, :scanner => scanner)
                end

                def recv_next_row()
                  result = receive_message(Next_row_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'next_row failed: unknown result')
                end

                def next_row_as_arrays(scanner)
                  send_next_row_as_arrays(scanner)
                  return recv_next_row_as_arrays()
                end

                def send_next_row_as_arrays(scanner)
                  send_message('next_row_as_arrays', Next_row_as_arrays_args, :scanner => scanner)
                end

                def recv_next_row_as_arrays()
                  result = receive_message(Next_row_as_arrays_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'next_row_as_arrays failed: unknown result')
                end

                def next_row_serialized(scanner)
                  send_next_row_serialized(scanner)
                  return recv_next_row_serialized()
                end

                def send_next_row_serialized(scanner)
                  send_message('next_row_serialized', Next_row_serialized_args, :scanner => scanner)
                end

                def recv_next_row_serialized()
                  result = receive_message(Next_row_serialized_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'next_row_serialized failed: unknown result')
                end

                def get_row(ns, table_name, row)
                  send_get_row(ns, table_name, row)
                  return recv_get_row()
                end

                def send_get_row(ns, table_name, row)
                  send_message('get_row', Get_row_args, :ns => ns, :table_name => table_name, :row => row)
                end

                def recv_get_row()
                  result = receive_message(Get_row_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_row failed: unknown result')
                end

                def get_row_as_arrays(ns, name, row)
                  send_get_row_as_arrays(ns, name, row)
                  return recv_get_row_as_arrays()
                end

                def send_get_row_as_arrays(ns, name, row)
                  send_message('get_row_as_arrays', Get_row_as_arrays_args, :ns => ns, :name => name, :row => row)
                end

                def recv_get_row_as_arrays()
                  result = receive_message(Get_row_as_arrays_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_row_as_arrays failed: unknown result')
                end

                def get_row_serialized(ns, table_name, row)
                  send_get_row_serialized(ns, table_name, row)
                  return recv_get_row_serialized()
                end

                def send_get_row_serialized(ns, table_name, row)
                  send_message('get_row_serialized', Get_row_serialized_args, :ns => ns, :table_name => table_name, :row => row)
                end

                def recv_get_row_serialized()
                  result = receive_message(Get_row_serialized_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_row_serialized failed: unknown result')
                end

                def get_cell(ns, table_name, row, column)
                  send_get_cell(ns, table_name, row, column)
                  return recv_get_cell()
                end

                def send_get_cell(ns, table_name, row, column)
                  send_message('get_cell', Get_cell_args, :ns => ns, :table_name => table_name, :row => row, :column => column)
                end

                def recv_get_cell()
                  result = receive_message(Get_cell_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_cell failed: unknown result')
                end

                def get_cells(ns, table_name, scan_spec)
                  send_get_cells(ns, table_name, scan_spec)
                  return recv_get_cells()
                end

                def send_get_cells(ns, table_name, scan_spec)
                  send_message('get_cells', Get_cells_args, :ns => ns, :table_name => table_name, :scan_spec => scan_spec)
                end

                def recv_get_cells()
                  result = receive_message(Get_cells_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_cells failed: unknown result')
                end

                def get_cells_as_arrays(ns, name, scan_spec)
                  send_get_cells_as_arrays(ns, name, scan_spec)
                  return recv_get_cells_as_arrays()
                end

                def send_get_cells_as_arrays(ns, name, scan_spec)
                  send_message('get_cells_as_arrays', Get_cells_as_arrays_args, :ns => ns, :name => name, :scan_spec => scan_spec)
                end

                def recv_get_cells_as_arrays()
                  result = receive_message(Get_cells_as_arrays_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_cells_as_arrays failed: unknown result')
                end

                def get_cells_serialized(ns, name, scan_spec)
                  send_get_cells_serialized(ns, name, scan_spec)
                  return recv_get_cells_serialized()
                end

                def send_get_cells_serialized(ns, name, scan_spec)
                  send_message('get_cells_serialized', Get_cells_serialized_args, :ns => ns, :name => name, :scan_spec => scan_spec)
                end

                def recv_get_cells_serialized()
                  result = receive_message(Get_cells_serialized_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_cells_serialized failed: unknown result')
                end

                def refresh_shared_mutator(ns, table_name, mutate_spec)
                  send_refresh_shared_mutator(ns, table_name, mutate_spec)
                  recv_refresh_shared_mutator()
                end

                def send_refresh_shared_mutator(ns, table_name, mutate_spec)
                  send_message('refresh_shared_mutator', Refresh_shared_mutator_args, :ns => ns, :table_name => table_name, :mutate_spec => mutate_spec)
                end

                def recv_refresh_shared_mutator()
                  result = receive_message(Refresh_shared_mutator_result)
                  raise result.e unless result.e.nil?
                  return
                end

                def offer_cells(ns, table_name, mutate_spec, cells)
                  send_offer_cells(ns, table_name, mutate_spec, cells)
                  recv_offer_cells()
                end

                def send_offer_cells(ns, table_name, mutate_spec, cells)
                  send_message('offer_cells', Offer_cells_args, :ns => ns, :table_name => table_name, :mutate_spec => mutate_spec, :cells => cells)
                end

                def recv_offer_cells()
                  result = receive_message(Offer_cells_result)
                  raise result.e unless result.e.nil?
                  return
                end

                def offer_cells_as_arrays(ns, table_name, mutate_spec, cells)
                  send_offer_cells_as_arrays(ns, table_name, mutate_spec, cells)
                  recv_offer_cells_as_arrays()
                end

                def send_offer_cells_as_arrays(ns, table_name, mutate_spec, cells)
                  send_message('offer_cells_as_arrays', Offer_cells_as_arrays_args, :ns => ns, :table_name => table_name, :mutate_spec => mutate_spec, :cells => cells)
                end

                def recv_offer_cells_as_arrays()
                  result = receive_message(Offer_cells_as_arrays_result)
                  raise result.e unless result.e.nil?
                  return
                end

                def offer_cell(ns, table_name, mutate_spec, cell)
                  send_offer_cell(ns, table_name, mutate_spec, cell)
                  recv_offer_cell()
                end

                def send_offer_cell(ns, table_name, mutate_spec, cell)
                  send_message('offer_cell', Offer_cell_args, :ns => ns, :table_name => table_name, :mutate_spec => mutate_spec, :cell => cell)
                end

                def recv_offer_cell()
                  result = receive_message(Offer_cell_result)
                  raise result.e unless result.e.nil?
                  return
                end

                def offer_cell_as_array(ns, table_name, mutate_spec, cell)
                  send_offer_cell_as_array(ns, table_name, mutate_spec, cell)
                  recv_offer_cell_as_array()
                end

                def send_offer_cell_as_array(ns, table_name, mutate_spec, cell)
                  send_message('offer_cell_as_array', Offer_cell_as_array_args, :ns => ns, :table_name => table_name, :mutate_spec => mutate_spec, :cell => cell)
                end

                def recv_offer_cell_as_array()
                  result = receive_message(Offer_cell_as_array_result)
                  raise result.e unless result.e.nil?
                  return
                end

                def open_mutator(ns, table_name, flags, flush_interval)
                  send_open_mutator(ns, table_name, flags, flush_interval)
                  return recv_open_mutator()
                end

                def send_open_mutator(ns, table_name, flags, flush_interval)
                  send_message('open_mutator', Open_mutator_args, :ns => ns, :table_name => table_name, :flags => flags, :flush_interval => flush_interval)
                end

                def recv_open_mutator()
                  result = receive_message(Open_mutator_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'open_mutator failed: unknown result')
                end

                def close_mutator(mutator, flush)
                  send_close_mutator(mutator, flush)
                  recv_close_mutator()
                end

                def send_close_mutator(mutator, flush)
                  send_message('close_mutator', Close_mutator_args, :mutator => mutator, :flush => flush)
                end

                def recv_close_mutator()
                  result = receive_message(Close_mutator_result)
                  raise result.e unless result.e.nil?
                  return
                end

                def set_cell(mutator, cell)
                  send_set_cell(mutator, cell)
                  recv_set_cell()
                end

                def send_set_cell(mutator, cell)
                  send_message('set_cell', Set_cell_args, :mutator => mutator, :cell => cell)
                end

                def recv_set_cell()
                  result = receive_message(Set_cell_result)
                  raise result.e unless result.e.nil?
                  return
                end

                def set_cell_as_array(mutator, cell)
                  send_set_cell_as_array(mutator, cell)
                  recv_set_cell_as_array()
                end

                def send_set_cell_as_array(mutator, cell)
                  send_message('set_cell_as_array', Set_cell_as_array_args, :mutator => mutator, :cell => cell)
                end

                def recv_set_cell_as_array()
                  result = receive_message(Set_cell_as_array_result)
                  raise result.e unless result.e.nil?
                  return
                end

                def set_cells(mutator, cells)
                  send_set_cells(mutator, cells)
                  recv_set_cells()
                end

                def send_set_cells(mutator, cells)
                  send_message('set_cells', Set_cells_args, :mutator => mutator, :cells => cells)
                end

                def recv_set_cells()
                  result = receive_message(Set_cells_result)
                  raise result.e unless result.e.nil?
                  return
                end

                def set_cells_as_arrays(mutator, cells)
                  send_set_cells_as_arrays(mutator, cells)
                  recv_set_cells_as_arrays()
                end

                def send_set_cells_as_arrays(mutator, cells)
                  send_message('set_cells_as_arrays', Set_cells_as_arrays_args, :mutator => mutator, :cells => cells)
                end

                def recv_set_cells_as_arrays()
                  result = receive_message(Set_cells_as_arrays_result)
                  raise result.e unless result.e.nil?
                  return
                end

                def set_cells_serialized(mutator, cells, flush)
                  send_set_cells_serialized(mutator, cells, flush)
                  recv_set_cells_serialized()
                end

                def send_set_cells_serialized(mutator, cells, flush)
                  send_message('set_cells_serialized', Set_cells_serialized_args, :mutator => mutator, :cells => cells, :flush => flush)
                end

                def recv_set_cells_serialized()
                  result = receive_message(Set_cells_serialized_result)
                  raise result.e unless result.e.nil?
                  return
                end

                def flush_mutator(mutator)
                  send_flush_mutator(mutator)
                  recv_flush_mutator()
                end

                def send_flush_mutator(mutator)
                  send_message('flush_mutator', Flush_mutator_args, :mutator => mutator)
                end

                def recv_flush_mutator()
                  result = receive_message(Flush_mutator_result)
                  raise result.e unless result.e.nil?
                  return
                end

                def exists_namespace(ns)
                  send_exists_namespace(ns)
                  return recv_exists_namespace()
                end

                def send_exists_namespace(ns)
                  send_message('exists_namespace', Exists_namespace_args, :ns => ns)
                end

                def recv_exists_namespace()
                  result = receive_message(Exists_namespace_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'exists_namespace failed: unknown result')
                end

                def exists_table(ns, name)
                  send_exists_table(ns, name)
                  return recv_exists_table()
                end

                def send_exists_table(ns, name)
                  send_message('exists_table', Exists_table_args, :ns => ns, :name => name)
                end

                def recv_exists_table()
                  result = receive_message(Exists_table_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'exists_table failed: unknown result')
                end

                def get_table_id(ns, table_name)
                  send_get_table_id(ns, table_name)
                  return recv_get_table_id()
                end

                def send_get_table_id(ns, table_name)
                  send_message('get_table_id', Get_table_id_args, :ns => ns, :table_name => table_name)
                end

                def recv_get_table_id()
                  result = receive_message(Get_table_id_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_table_id failed: unknown result')
                end

                def get_schema_str(ns, table_name)
                  send_get_schema_str(ns, table_name)
                  return recv_get_schema_str()
                end

                def send_get_schema_str(ns, table_name)
                  send_message('get_schema_str', Get_schema_str_args, :ns => ns, :table_name => table_name)
                end

                def recv_get_schema_str()
                  result = receive_message(Get_schema_str_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_schema_str failed: unknown result')
                end

                def get_schema(ns, table_name)
                  send_get_schema(ns, table_name)
                  return recv_get_schema()
                end

                def send_get_schema(ns, table_name)
                  send_message('get_schema', Get_schema_args, :ns => ns, :table_name => table_name)
                end

                def recv_get_schema()
                  result = receive_message(Get_schema_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_schema failed: unknown result')
                end

                def get_tables(ns)
                  send_get_tables(ns)
                  return recv_get_tables()
                end

                def send_get_tables(ns)
                  send_message('get_tables', Get_tables_args, :ns => ns)
                end

                def recv_get_tables()
                  result = receive_message(Get_tables_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_tables failed: unknown result')
                end

                def get_listing(ns)
                  send_get_listing(ns)
                  return recv_get_listing()
                end

                def send_get_listing(ns)
                  send_message('get_listing', Get_listing_args, :ns => ns)
                end

                def recv_get_listing()
                  result = receive_message(Get_listing_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_listing failed: unknown result')
                end

                def get_table_splits(ns, table_name)
                  send_get_table_splits(ns, table_name)
                  return recv_get_table_splits()
                end

                def send_get_table_splits(ns, table_name)
                  send_message('get_table_splits', Get_table_splits_args, :ns => ns, :table_name => table_name)
                end

                def recv_get_table_splits()
                  result = receive_message(Get_table_splits_result)
                  return result.success unless result.success.nil?
                  raise result.e unless result.e.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_table_splits failed: unknown result')
                end

                def drop_namespace(ns, if_exists)
                  send_drop_namespace(ns, if_exists)
                  recv_drop_namespace()
                end

                def send_drop_namespace(ns, if_exists)
                  send_message('drop_namespace', Drop_namespace_args, :ns => ns, :if_exists => if_exists)
                end

                def recv_drop_namespace()
                  result = receive_message(Drop_namespace_result)
                  raise result.e unless result.e.nil?
                  return
                end

                def rename_table(ns, name, new_name)
                  send_rename_table(ns, name, new_name)
                  recv_rename_table()
                end

                def send_rename_table(ns, name, new_name)
                  send_message('rename_table', Rename_table_args, :ns => ns, :name => name, :new_name => new_name)
                end

                def recv_rename_table()
                  result = receive_message(Rename_table_result)
                  raise result.e unless result.e.nil?
                  return
                end

                def drop_table(ns, name, if_exists)
                  send_drop_table(ns, name, if_exists)
                  recv_drop_table()
                end

                def send_drop_table(ns, name, if_exists)
                  send_message('drop_table', Drop_table_args, :ns => ns, :name => name, :if_exists => if_exists)
                end

                def recv_drop_table()
                  result = receive_message(Drop_table_result)
                  raise result.e unless result.e.nil?
                  return
                end

              end

              class Processor
                include ::Thrift::Processor

                def process_create_namespace(seqid, iprot, oprot)
                  args = read_args(iprot, Create_namespace_args)
                  result = Create_namespace_result.new()
                  begin
                    @handler.create_namespace(args.ns)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'create_namespace', seqid)
                end

                def process_create_table(seqid, iprot, oprot)
                  args = read_args(iprot, Create_table_args)
                  result = Create_table_result.new()
                  begin
                    @handler.create_table(args.ns, args.table_name, args.schema)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'create_table', seqid)
                end

                def process_open_namespace(seqid, iprot, oprot)
                  args = read_args(iprot, Open_namespace_args)
                  result = Open_namespace_result.new()
                  begin
                    result.success = @handler.open_namespace(args.ns)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'open_namespace', seqid)
                end

                def process_close_namespace(seqid, iprot, oprot)
                  args = read_args(iprot, Close_namespace_args)
                  result = Close_namespace_result.new()
                  begin
                    @handler.close_namespace(args.ns)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'close_namespace', seqid)
                end

                def process_open_future(seqid, iprot, oprot)
                  args = read_args(iprot, Open_future_args)
                  result = Open_future_result.new()
                  begin
                    result.success = @handler.open_future(args.queue_size)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'open_future', seqid)
                end

                def process_cancel_future(seqid, iprot, oprot)
                  args = read_args(iprot, Cancel_future_args)
                  result = Cancel_future_result.new()
                  begin
                    @handler.cancel_future(args.ff)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'cancel_future', seqid)
                end

                def process_get_future_result(seqid, iprot, oprot)
                  args = read_args(iprot, Get_future_result_args)
                  result = Get_future_result_result.new()
                  begin
                    result.success = @handler.get_future_result(args.ff)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'get_future_result', seqid)
                end

                def process_get_future_result_as_arrays(seqid, iprot, oprot)
                  args = read_args(iprot, Get_future_result_as_arrays_args)
                  result = Get_future_result_as_arrays_result.new()
                  begin
                    result.success = @handler.get_future_result_as_arrays(args.ff)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'get_future_result_as_arrays', seqid)
                end

                def process_get_future_result_serialized(seqid, iprot, oprot)
                  args = read_args(iprot, Get_future_result_serialized_args)
                  result = Get_future_result_serialized_result.new()
                  begin
                    result.success = @handler.get_future_result_serialized(args.ff)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'get_future_result_serialized', seqid)
                end

                def process_close_future(seqid, iprot, oprot)
                  args = read_args(iprot, Close_future_args)
                  result = Close_future_result.new()
                  begin
                    @handler.close_future(args.ff)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'close_future', seqid)
                end

                def process_open_scanner(seqid, iprot, oprot)
                  args = read_args(iprot, Open_scanner_args)
                  result = Open_scanner_result.new()
                  begin
                    result.success = @handler.open_scanner(args.ns, args.table_name, args.scan_spec, args.retry_table_not_found)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'open_scanner', seqid)
                end

                def process_open_scanner_async(seqid, iprot, oprot)
                  args = read_args(iprot, Open_scanner_async_args)
                  result = Open_scanner_async_result.new()
                  begin
                    result.success = @handler.open_scanner_async(args.ns, args.table_name, args.future, args.scan_spec, args.retry_table_not_found)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'open_scanner_async', seqid)
                end

                def process_close_scanner(seqid, iprot, oprot)
                  args = read_args(iprot, Close_scanner_args)
                  result = Close_scanner_result.new()
                  begin
                    @handler.close_scanner(args.scanner)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'close_scanner', seqid)
                end

                def process_close_scanner_async(seqid, iprot, oprot)
                  args = read_args(iprot, Close_scanner_async_args)
                  result = Close_scanner_async_result.new()
                  begin
                    @handler.close_scanner_async(args.scanner)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'close_scanner_async', seqid)
                end

                def process_next_cells(seqid, iprot, oprot)
                  args = read_args(iprot, Next_cells_args)
                  result = Next_cells_result.new()
                  begin
                    result.success = @handler.next_cells(args.scanner)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'next_cells', seqid)
                end

                def process_next_cells_as_arrays(seqid, iprot, oprot)
                  args = read_args(iprot, Next_cells_as_arrays_args)
                  result = Next_cells_as_arrays_result.new()
                  begin
                    result.success = @handler.next_cells_as_arrays(args.scanner)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'next_cells_as_arrays', seqid)
                end

                def process_next_cells_serialized(seqid, iprot, oprot)
                  args = read_args(iprot, Next_cells_serialized_args)
                  result = Next_cells_serialized_result.new()
                  result.success = @handler.next_cells_serialized(args.scanner)
                  write_result(result, oprot, 'next_cells_serialized', seqid)
                end

                def process_next_row(seqid, iprot, oprot)
                  args = read_args(iprot, Next_row_args)
                  result = Next_row_result.new()
                  begin
                    result.success = @handler.next_row(args.scanner)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'next_row', seqid)
                end

                def process_next_row_as_arrays(seqid, iprot, oprot)
                  args = read_args(iprot, Next_row_as_arrays_args)
                  result = Next_row_as_arrays_result.new()
                  begin
                    result.success = @handler.next_row_as_arrays(args.scanner)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'next_row_as_arrays', seqid)
                end

                def process_next_row_serialized(seqid, iprot, oprot)
                  args = read_args(iprot, Next_row_serialized_args)
                  result = Next_row_serialized_result.new()
                  begin
                    result.success = @handler.next_row_serialized(args.scanner)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'next_row_serialized', seqid)
                end

                def process_get_row(seqid, iprot, oprot)
                  args = read_args(iprot, Get_row_args)
                  result = Get_row_result.new()
                  begin
                    result.success = @handler.get_row(args.ns, args.table_name, args.row)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'get_row', seqid)
                end

                def process_get_row_as_arrays(seqid, iprot, oprot)
                  args = read_args(iprot, Get_row_as_arrays_args)
                  result = Get_row_as_arrays_result.new()
                  begin
                    result.success = @handler.get_row_as_arrays(args.ns, args.name, args.row)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'get_row_as_arrays', seqid)
                end

                def process_get_row_serialized(seqid, iprot, oprot)
                  args = read_args(iprot, Get_row_serialized_args)
                  result = Get_row_serialized_result.new()
                  begin
                    result.success = @handler.get_row_serialized(args.ns, args.table_name, args.row)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'get_row_serialized', seqid)
                end

                def process_get_cell(seqid, iprot, oprot)
                  args = read_args(iprot, Get_cell_args)
                  result = Get_cell_result.new()
                  begin
                    result.success = @handler.get_cell(args.ns, args.table_name, args.row, args.column)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'get_cell', seqid)
                end

                def process_get_cells(seqid, iprot, oprot)
                  args = read_args(iprot, Get_cells_args)
                  result = Get_cells_result.new()
                  begin
                    result.success = @handler.get_cells(args.ns, args.table_name, args.scan_spec)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'get_cells', seqid)
                end

                def process_get_cells_as_arrays(seqid, iprot, oprot)
                  args = read_args(iprot, Get_cells_as_arrays_args)
                  result = Get_cells_as_arrays_result.new()
                  begin
                    result.success = @handler.get_cells_as_arrays(args.ns, args.name, args.scan_spec)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'get_cells_as_arrays', seqid)
                end

                def process_get_cells_serialized(seqid, iprot, oprot)
                  args = read_args(iprot, Get_cells_serialized_args)
                  result = Get_cells_serialized_result.new()
                  begin
                    result.success = @handler.get_cells_serialized(args.ns, args.name, args.scan_spec)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'get_cells_serialized', seqid)
                end

                def process_refresh_shared_mutator(seqid, iprot, oprot)
                  args = read_args(iprot, Refresh_shared_mutator_args)
                  result = Refresh_shared_mutator_result.new()
                  begin
                    @handler.refresh_shared_mutator(args.ns, args.table_name, args.mutate_spec)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'refresh_shared_mutator', seqid)
                end

                def process_offer_cells(seqid, iprot, oprot)
                  args = read_args(iprot, Offer_cells_args)
                  result = Offer_cells_result.new()
                  begin
                    @handler.offer_cells(args.ns, args.table_name, args.mutate_spec, args.cells)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'offer_cells', seqid)
                end

                def process_offer_cells_as_arrays(seqid, iprot, oprot)
                  args = read_args(iprot, Offer_cells_as_arrays_args)
                  result = Offer_cells_as_arrays_result.new()
                  begin
                    @handler.offer_cells_as_arrays(args.ns, args.table_name, args.mutate_spec, args.cells)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'offer_cells_as_arrays', seqid)
                end

                def process_offer_cell(seqid, iprot, oprot)
                  args = read_args(iprot, Offer_cell_args)
                  result = Offer_cell_result.new()
                  begin
                    @handler.offer_cell(args.ns, args.table_name, args.mutate_spec, args.cell)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'offer_cell', seqid)
                end

                def process_offer_cell_as_array(seqid, iprot, oprot)
                  args = read_args(iprot, Offer_cell_as_array_args)
                  result = Offer_cell_as_array_result.new()
                  begin
                    @handler.offer_cell_as_array(args.ns, args.table_name, args.mutate_spec, args.cell)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'offer_cell_as_array', seqid)
                end

                def process_open_mutator(seqid, iprot, oprot)
                  args = read_args(iprot, Open_mutator_args)
                  result = Open_mutator_result.new()
                  begin
                    result.success = @handler.open_mutator(args.ns, args.table_name, args.flags, args.flush_interval)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'open_mutator', seqid)
                end

                def process_close_mutator(seqid, iprot, oprot)
                  args = read_args(iprot, Close_mutator_args)
                  result = Close_mutator_result.new()
                  begin
                    @handler.close_mutator(args.mutator, args.flush)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'close_mutator', seqid)
                end

                def process_set_cell(seqid, iprot, oprot)
                  args = read_args(iprot, Set_cell_args)
                  result = Set_cell_result.new()
                  begin
                    @handler.set_cell(args.mutator, args.cell)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'set_cell', seqid)
                end

                def process_set_cell_as_array(seqid, iprot, oprot)
                  args = read_args(iprot, Set_cell_as_array_args)
                  result = Set_cell_as_array_result.new()
                  begin
                    @handler.set_cell_as_array(args.mutator, args.cell)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'set_cell_as_array', seqid)
                end

                def process_set_cells(seqid, iprot, oprot)
                  args = read_args(iprot, Set_cells_args)
                  result = Set_cells_result.new()
                  begin
                    @handler.set_cells(args.mutator, args.cells)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'set_cells', seqid)
                end

                def process_set_cells_as_arrays(seqid, iprot, oprot)
                  args = read_args(iprot, Set_cells_as_arrays_args)
                  result = Set_cells_as_arrays_result.new()
                  begin
                    @handler.set_cells_as_arrays(args.mutator, args.cells)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'set_cells_as_arrays', seqid)
                end

                def process_set_cells_serialized(seqid, iprot, oprot)
                  args = read_args(iprot, Set_cells_serialized_args)
                  result = Set_cells_serialized_result.new()
                  begin
                    @handler.set_cells_serialized(args.mutator, args.cells, args.flush)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'set_cells_serialized', seqid)
                end

                def process_flush_mutator(seqid, iprot, oprot)
                  args = read_args(iprot, Flush_mutator_args)
                  result = Flush_mutator_result.new()
                  begin
                    @handler.flush_mutator(args.mutator)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'flush_mutator', seqid)
                end

                def process_exists_namespace(seqid, iprot, oprot)
                  args = read_args(iprot, Exists_namespace_args)
                  result = Exists_namespace_result.new()
                  begin
                    result.success = @handler.exists_namespace(args.ns)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'exists_namespace', seqid)
                end

                def process_exists_table(seqid, iprot, oprot)
                  args = read_args(iprot, Exists_table_args)
                  result = Exists_table_result.new()
                  begin
                    result.success = @handler.exists_table(args.ns, args.name)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'exists_table', seqid)
                end

                def process_get_table_id(seqid, iprot, oprot)
                  args = read_args(iprot, Get_table_id_args)
                  result = Get_table_id_result.new()
                  begin
                    result.success = @handler.get_table_id(args.ns, args.table_name)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'get_table_id', seqid)
                end

                def process_get_schema_str(seqid, iprot, oprot)
                  args = read_args(iprot, Get_schema_str_args)
                  result = Get_schema_str_result.new()
                  begin
                    result.success = @handler.get_schema_str(args.ns, args.table_name)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'get_schema_str', seqid)
                end

                def process_get_schema(seqid, iprot, oprot)
                  args = read_args(iprot, Get_schema_args)
                  result = Get_schema_result.new()
                  begin
                    result.success = @handler.get_schema(args.ns, args.table_name)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'get_schema', seqid)
                end

                def process_get_tables(seqid, iprot, oprot)
                  args = read_args(iprot, Get_tables_args)
                  result = Get_tables_result.new()
                  begin
                    result.success = @handler.get_tables(args.ns)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'get_tables', seqid)
                end

                def process_get_listing(seqid, iprot, oprot)
                  args = read_args(iprot, Get_listing_args)
                  result = Get_listing_result.new()
                  begin
                    result.success = @handler.get_listing(args.ns)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'get_listing', seqid)
                end

                def process_get_table_splits(seqid, iprot, oprot)
                  args = read_args(iprot, Get_table_splits_args)
                  result = Get_table_splits_result.new()
                  begin
                    result.success = @handler.get_table_splits(args.ns, args.table_name)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'get_table_splits', seqid)
                end

                def process_drop_namespace(seqid, iprot, oprot)
                  args = read_args(iprot, Drop_namespace_args)
                  result = Drop_namespace_result.new()
                  begin
                    @handler.drop_namespace(args.ns, args.if_exists)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'drop_namespace', seqid)
                end

                def process_rename_table(seqid, iprot, oprot)
                  args = read_args(iprot, Rename_table_args)
                  result = Rename_table_result.new()
                  begin
                    @handler.rename_table(args.ns, args.name, args.new_name)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'rename_table', seqid)
                end

                def process_drop_table(seqid, iprot, oprot)
                  args = read_args(iprot, Drop_table_args)
                  result = Drop_table_result.new()
                  begin
                    @handler.drop_table(args.ns, args.name, args.if_exists)
                  rescue Hypertable::ThriftGen::ClientException => e
                    result.e = e
                  end
                  write_result(result, oprot, 'drop_table', seqid)
                end

              end

              # HELPER FUNCTIONS AND STRUCTURES

              class Create_namespace_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1

                FIELDS = {
                  NS => {:type => ::Thrift::Types::STRING, :name => 'ns'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Create_namespace_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Create_table_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                TABLE_NAME = 2
                SCHEMA = 3

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
                  SCHEMA => {:type => ::Thrift::Types::STRING, :name => 'schema'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Create_table_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Open_namespace_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1

                FIELDS = {
                  NS => {:type => ::Thrift::Types::STRING, :name => 'ns'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Open_namespace_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Close_namespace_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Close_namespace_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Open_future_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                QUEUE_SIZE = 1

                FIELDS = {
                  QUEUE_SIZE => {:type => ::Thrift::Types::I32, :name => 'queue_size', :default => 0}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Open_future_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Cancel_future_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                FF = 1

                FIELDS = {
                  FF => {:type => ::Thrift::Types::I64, :name => 'ff'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Cancel_future_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_future_result_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                FF = 1

                FIELDS = {
                  FF => {:type => ::Thrift::Types::I64, :name => 'ff'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_future_result_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hypertable::ThriftGen::Result},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_future_result_as_arrays_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                FF = 1

                FIELDS = {
                  FF => {:type => ::Thrift::Types::I64, :name => 'ff'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_future_result_as_arrays_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hypertable::ThriftGen::ResultAsArrays},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_future_result_serialized_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                FF = 1

                FIELDS = {
                  FF => {:type => ::Thrift::Types::I64, :name => 'ff'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_future_result_serialized_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hypertable::ThriftGen::ResultSerialized},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Close_future_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                FF = 1

                FIELDS = {
                  FF => {:type => ::Thrift::Types::I64, :name => 'ff'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Close_future_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Open_scanner_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                TABLE_NAME = 2
                SCAN_SPEC = 3
                RETRY_TABLE_NOT_FOUND = 4

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
                  SCAN_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'scan_spec', :class => Hypertable::ThriftGen::ScanSpec},
                  RETRY_TABLE_NOT_FOUND => {:type => ::Thrift::Types::BOOL, :name => 'retry_table_not_found', :default => false}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Open_scanner_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Open_scanner_async_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                TABLE_NAME = 2
                FUTURE = 3
                SCAN_SPEC = 4
                RETRY_TABLE_NOT_FOUND = 5

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
                  FUTURE => {:type => ::Thrift::Types::I64, :name => 'future'},
                  SCAN_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'scan_spec', :class => Hypertable::ThriftGen::ScanSpec},
                  RETRY_TABLE_NOT_FOUND => {:type => ::Thrift::Types::BOOL, :name => 'retry_table_not_found', :default => false}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Open_scanner_async_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Close_scanner_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SCANNER = 1

                FIELDS = {
                  SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Close_scanner_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Close_scanner_async_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SCANNER = 1

                FIELDS = {
                  SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Close_scanner_async_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Next_cells_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SCANNER = 1

                FIELDS = {
                  SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Next_cells_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => Hypertable::ThriftGen::Cell}},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Next_cells_as_arrays_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SCANNER = 1

                FIELDS = {
                  SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Next_cells_as_arrays_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Next_cells_serialized_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SCANNER = 1

                FIELDS = {
                  SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Next_cells_serialized_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Next_row_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SCANNER = 1

                FIELDS = {
                  SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Next_row_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => Hypertable::ThriftGen::Cell}},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Next_row_as_arrays_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SCANNER = 1

                FIELDS = {
                  SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Next_row_as_arrays_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Next_row_serialized_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SCANNER = 1

                FIELDS = {
                  SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Next_row_serialized_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_row_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                TABLE_NAME = 2
                ROW = 3

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
                  ROW => {:type => ::Thrift::Types::STRING, :name => 'row'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_row_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => Hypertable::ThriftGen::Cell}},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_row_as_arrays_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                NAME = 2
                ROW = 3

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
                  ROW => {:type => ::Thrift::Types::STRING, :name => 'row'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_row_as_arrays_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_row_serialized_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                TABLE_NAME = 2
                ROW = 3

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
                  ROW => {:type => ::Thrift::Types::STRING, :name => 'row'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_row_serialized_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_cell_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                TABLE_NAME = 2
                ROW = 3
                COLUMN = 4

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
                  ROW => {:type => ::Thrift::Types::STRING, :name => 'row'},
                  COLUMN => {:type => ::Thrift::Types::STRING, :name => 'column'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_cell_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_cells_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                TABLE_NAME = 2
                SCAN_SPEC = 3

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
                  SCAN_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'scan_spec', :class => Hypertable::ThriftGen::ScanSpec}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_cells_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => Hypertable::ThriftGen::Cell}},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_cells_as_arrays_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                NAME = 2
                SCAN_SPEC = 3

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
                  SCAN_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'scan_spec', :class => Hypertable::ThriftGen::ScanSpec}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_cells_as_arrays_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_cells_serialized_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                NAME = 2
                SCAN_SPEC = 3

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
                  SCAN_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'scan_spec', :class => Hypertable::ThriftGen::ScanSpec}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_cells_serialized_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Refresh_shared_mutator_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                TABLE_NAME = 2
                MUTATE_SPEC = 3

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
                  MUTATE_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'mutate_spec', :class => Hypertable::ThriftGen::MutateSpec}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Refresh_shared_mutator_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Offer_cells_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                TABLE_NAME = 2
                MUTATE_SPEC = 3
                CELLS = 4

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
                  MUTATE_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'mutate_spec', :class => Hypertable::ThriftGen::MutateSpec},
                  CELLS => {:type => ::Thrift::Types::LIST, :name => 'cells', :element => {:type => ::Thrift::Types::STRUCT, :class => Hypertable::ThriftGen::Cell}}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Offer_cells_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Offer_cells_as_arrays_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                TABLE_NAME = 2
                MUTATE_SPEC = 3
                CELLS = 4

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
                  MUTATE_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'mutate_spec', :class => Hypertable::ThriftGen::MutateSpec},
                  CELLS => {:type => ::Thrift::Types::LIST, :name => 'cells', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Offer_cells_as_arrays_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Offer_cell_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                TABLE_NAME = 2
                MUTATE_SPEC = 3
                CELL = 4

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
                  MUTATE_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'mutate_spec', :class => Hypertable::ThriftGen::MutateSpec},
                  CELL => {:type => ::Thrift::Types::STRUCT, :name => 'cell', :class => Hypertable::ThriftGen::Cell}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Offer_cell_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Offer_cell_as_array_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                TABLE_NAME = 2
                MUTATE_SPEC = 3
                CELL = 4

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
                  MUTATE_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'mutate_spec', :class => Hypertable::ThriftGen::MutateSpec},
                  CELL => {:type => ::Thrift::Types::LIST, :name => 'cell', :element => {:type => ::Thrift::Types::STRING}}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Offer_cell_as_array_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Open_mutator_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                TABLE_NAME = 2
                FLAGS = 3
                FLUSH_INTERVAL = 4

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
                  FLAGS => {:type => ::Thrift::Types::I32, :name => 'flags', :default => 0},
                  FLUSH_INTERVAL => {:type => ::Thrift::Types::I32, :name => 'flush_interval', :default => 0}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Open_mutator_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Close_mutator_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                MUTATOR = 1
                FLUSH = 2

                FIELDS = {
                  MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'},
                  FLUSH => {:type => ::Thrift::Types::BOOL, :name => 'flush', :default => true}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Close_mutator_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Set_cell_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                MUTATOR = 1
                CELL = 2

                FIELDS = {
                  MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'},
                  CELL => {:type => ::Thrift::Types::STRUCT, :name => 'cell', :class => Hypertable::ThriftGen::Cell}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Set_cell_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Set_cell_as_array_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                MUTATOR = 1
                CELL = 2

                FIELDS = {
                  MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'},
                  CELL => {:type => ::Thrift::Types::LIST, :name => 'cell', :element => {:type => ::Thrift::Types::STRING}}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Set_cell_as_array_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Set_cells_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                MUTATOR = 1
                CELLS = 2

                FIELDS = {
                  MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'},
                  CELLS => {:type => ::Thrift::Types::LIST, :name => 'cells', :element => {:type => ::Thrift::Types::STRUCT, :class => Hypertable::ThriftGen::Cell}}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Set_cells_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Set_cells_as_arrays_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                MUTATOR = 1
                CELLS = 2

                FIELDS = {
                  MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'},
                  CELLS => {:type => ::Thrift::Types::LIST, :name => 'cells', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Set_cells_as_arrays_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Set_cells_serialized_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                MUTATOR = 1
                CELLS = 2
                FLUSH = 3

                FIELDS = {
                  MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'},
                  CELLS => {:type => ::Thrift::Types::STRING, :name => 'cells', :binary => true},
                  FLUSH => {:type => ::Thrift::Types::BOOL, :name => 'flush', :default => false}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Set_cells_serialized_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Flush_mutator_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                MUTATOR = 1

                FIELDS = {
                  MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Flush_mutator_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Exists_namespace_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1

                FIELDS = {
                  NS => {:type => ::Thrift::Types::STRING, :name => 'ns'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Exists_namespace_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Exists_table_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                NAME = 2

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Exists_table_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_table_id_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                TABLE_NAME = 2

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_table_id_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_schema_str_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                TABLE_NAME = 2

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_schema_str_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_schema_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                TABLE_NAME = 2

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_schema_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hypertable::ThriftGen::Schema},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_tables_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_tables_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_listing_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_listing_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => Hypertable::ThriftGen::NamespaceListing}},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_table_splits_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                TABLE_NAME = 2

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Get_table_splits_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0
                E = 1

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => Hypertable::ThriftGen::TableSplit}},
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Drop_namespace_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                IF_EXISTS = 2

                FIELDS = {
                  NS => {:type => ::Thrift::Types::STRING, :name => 'ns'},
                  IF_EXISTS => {:type => ::Thrift::Types::BOOL, :name => 'if_exists', :default => true}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Drop_namespace_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Rename_table_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                NAME = 2
                NEW_NAME = 3

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
                  NEW_NAME => {:type => ::Thrift::Types::STRING, :name => 'new_name'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Rename_table_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Drop_table_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                NS = 1
                NAME = 2
                IF_EXISTS = 3

                FIELDS = {
                  NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
                  NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
                  IF_EXISTS => {:type => ::Thrift::Types::BOOL, :name => 'if_exists', :default => true}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Drop_table_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                E = 1

                FIELDS = {
                  E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => Hypertable::ThriftGen::ClientException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

            end

          end
        end
