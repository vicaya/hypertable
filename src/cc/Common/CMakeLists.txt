#
# Copyright(C) 2008 Doug Judd (Zvents, Inc.)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#

set(Common_SRCS
Abi.cc
Checksum.cc
Config.cc
DiscreteRandomGenerator.cc
DiscreteRandomGeneratorFactory.cc
DiscreteRandomGeneratorZipf.cc
Error.cc
FailureInducer.cc
FileUtils.cc
Filesystem.cc
InetAddr.cc
InteractiveCommand.cc
Logger.cc
Lookup3.cc
Math.cc
MurmurHash.cc
Properties.cc
Random.cc
String.cc
SuperFastHash.cc
System.cc
SystemInfo.cc
StatsSerializable.cc
StatsSystem.cc
StringCompressorPrefix.cc
StringDecompressorPrefix.cc
Time.cc
Usage.cc
Version.cc
md5.cc
)

if (${CMAKE_SYSTEM_NAME} MATCHES "SunOS")
  link_libraries(socket)
endif (${CMAKE_SYSTEM_NAME} MATCHES "SunOS")

add_library(HyperCommon ${Common_SRCS})
target_link_libraries(HyperCommon ${BOOST_LIBS} ${Log4cpp_LIBRARIES}
    ${READLINE_LIBRARIES} ${ZLIB_LIBRARIES} ${SIGAR_LIBRARIES}
    ${NCURSES_LIBRARY} ${CMAKE_THREAD_LIBS_INIT})

add_executable(system_info system_info.cc)
target_link_libraries(system_info HyperCommon)

add_executable(ht_checksum ht_checksum.cc)
target_link_libraries(ht_checksum HyperCommon)

# tests
add_executable(exception_test tests/exception_test.cc)
target_link_libraries(exception_test HyperCommon)

add_executable(logging_test tests/logging_test.cc)
target_link_libraries(logging_test HyperCommon)

# serialization tests
add_executable(sertest tests/sertest.cc)
target_link_libraries(sertest HyperCommon)

# scope guard tests
add_executable(scope_guard_test tests/scope_guard_test.cc)
target_link_libraries(scope_guard_test HyperCommon)

# inetaddr tests
add_executable(inetaddr_test tests/inetaddr_test.cc)
if (${CMAKE_SYSTEM_NAME} MATCHES "SunOS")
  target_link_libraries(inetaddr_test HyperCommon nsl resolv)
else (${CMAKE_SYSTEM_NAME} MATCHES "SunOS")
  target_link_libraries(inetaddr_test HyperCommon)
endif (${CMAKE_SYSTEM_NAME} MATCHES "SunOS")

# pagearena tests
add_executable(pagearena_test tests/pagearena_test.cc)
target_link_libraries(pagearena_test HyperCommon ${MALLOC_LIBRARY})

# mutex tests
add_executable(mutex_test tests/mutex_test.cc)
target_link_libraries(mutex_test HyperCommon)

# properties tests
add_executable(properties_test tests/properties_test.cc)
target_link_libraries(properties_test HyperCommon)

# init tests
add_executable(init_test tests/init_test.cc)
target_link_libraries(init_test HyperCommon)

# macro expanded formatted sertest.cc for easy debugging
# sertest-x.cc is generated by gpp included in toplevel bin/gpp
#add_executable(sertestx tests/sertest-x.cc)
#target_link_libraries(sertestx HyperCommon)

# bloom filter test
add_executable(bloom_filter_test tests/bloom_filter_test.cc)
target_link_libraries(bloom_filter_test HyperCommon)

# hash test
add_executable(hash_test tests/hash_test.cc)
target_link_libraries(hash_test HyperCommon ${MALLOC_LIBRARY})

# container tests
add_executable(container_test tests/container_test.cc)
target_link_libraries(container_test HyperCommon)

# md5 base 64 test
add_executable(md5_base64_test tests/md5_base64_test.cc)
target_link_libraries(md5_base64_test HyperCommon)

# StatsSerializable test
add_executable(stats_serialize_test tests/stats_serialize_test.cc)
target_link_libraries(stats_serialize_test HyperCommon)

# StringCompressor test
add_executable(string_compressor_test tests/string_compressor_test.cc)
target_link_libraries(string_compressor_test HyperCommon)

add_test(Common-Exception exception_test)
add_test(Common-Logging logging_test)
add_test(Common-Serialization sertest)
add_test(Common-ScopeGuard scope_guard_test)
add_test(Common-InetAddr inetaddr_test)
add_test(Common-PageArena pagearena_test)
add_test(Common-Properties ${TEST_DIFF}
  ${CMAKE_CURRENT_SOURCE_DIR}/tests/properties_test.golden ./properties_test)
add_test(Common-init ${TEST_DIFF}
  ${CMAKE_CURRENT_SOURCE_DIR}/tests/init_test.golden
  ./init_test --i16 1k --i32 64K --i64 1G --boo)
add_test(MD5-Base64 md5_base64_test)
add_test(Common-StatsSystem-serialize stats_serialize_test)
add_test(Common-StringCompressor string_compressor_test)

set(VERSION_H ${HYPERTABLE_BINARY_DIR}/src/cc/Common/Version.h)

configure_file(Version.h.in ${VERSION_H})
configure_file(${HYPERTABLE_SOURCE_DIR}/tests/data/words.gz
               ${HYPERTABLE_BINARY_DIR}/src/cc/Common/words.gz COPYONLY)
add_test(Common-BloomFilter bloom_filter_test)
add_test(Common-Hash hash_test)

if (NOT HT_COMPONENT_INSTALL)
  file(GLOB HEADERS *.h)

  install(FILES ${HEADERS} ${VERSION_H} DESTINATION include/Common)

  install(TARGETS HyperCommon
          RUNTIME DESTINATION bin
          LIBRARY DESTINATION lib
          ARCHIVE DESTINATION lib)

  install(TARGETS system_info ht_checksum
          RUNTIME DESTINATION bin)
endif ()
